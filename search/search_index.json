{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#mkdocs-print-site-plugin","title":"mkdocs-print-site-plugin","text":"<p>MkDocs plugin that adds a page to your site combining all pages, allowing your site visitors to File &gt; Print &gt; Save as PDF the entire site.</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>Install the plugin using <code>pip3</code>:</p> <pre><code>pip3 install mkdocs-print-site-plugin\n</code></pre> <p>Next, add the following lines to your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - search\n  - print-site\n</code></pre> <p> Make sure to put <code>print-site</code> to the bottom of the plugin list. This is because other plugins might alter your site (like the navigation), and you want these changes included in the print page.</p> <p>If you have no <code>plugins</code> entry in your config file yet, you'll likely also want to add the <code>search</code> plugin. MkDocs enables it by default if there is no <code>plugins</code> entry set.</p>"},{"location":"index.html#usage","title":"Usage","text":"<ul> <li>Navigate to <code>/print_page/</code> or <code>print_page.html</code></li> <li>Export to standalone HTML (see export to HTML)</li> <li>Export to PDF using your browser using File &gt; Print &gt; Save as PDF  (see export to PDF)</li> </ul>"},{"location":"contributing.html","title":"Contribution Guidelines","text":"<p>Thanks for considering to contribute to this project! Some guidelines:</p> <ul> <li>Go through the issue list and if needed create a relevant issue to discuss the change design. On disagreements, maintainer(s) will have the final word.</li> <li>You can expect a response from a maintainer within 7 days. If you haven\u2019t heard anything by then, feel free to ping the thread.</li> <li>This package tries to be as simple as possible for the user (hide any complexity from the user). Options are only added when there is clear value to the majority of users.</li> <li>When issues or pull requests are not going to be resolved or merged, they should be closed as soon as possible. This is kinder than deciding this after a long period. Our issue tracker should reflect work to be done.</li> </ul>"},{"location":"contributing.html#unit-tests","title":"Unit Tests","text":"<p>We use uv to manage python:</p> <pre><code>uv run pytest --cov=mkdocs_print_site_plugin --cov-report term-missing tests/\n</code></pre> <p>If it makes sense, writing tests for your PRs is always appreciated and will help get them merged.</p> <p>You can also apply formatting using:</p> <pre><code>uv run --with ruff ruff format src/\n</code></pre>"},{"location":"contributing.html#manual-testing","title":"Manual testing","text":"<p>To quickly serve a website with your latest changes to the plugin use the sites in our tests suite. For example:</p> <pre><code>uv run mkdocs serve -f tests/fixutures/basic/mkdocs.yml\n</code></pre> <p>Tip: If you use google chrome, you can also view the print version of a page inside the browser by setting the renderer.</p>"},{"location":"contributing.html#code-style","title":"Code Style","text":"<p>Make sure your code roughly follows PEP-8 and keeps things consistent with the rest of the code. I recommended using Ruff to automatically format your code.</p> <p>We use google-style docstrings.</p>"},{"location":"contributing.html#documentation","title":"Documentation","text":"<p>Is in <code>docs/</code>. To deploy the docs, run:</p> <pre><code>uv run mkdocs gh-deploy\n</code></pre> <p>Note: there is no automated github action for this currently.</p>"},{"location":"demo_content.html","title":"Demo Content","text":"<p>This content is here to demonstrate what it looks like while printing.</p> <p> Go ahead and visit the print page and check it out!</p>"},{"location":"demo_content.html#links-to-other-pages","title":"Links to other pages","text":"<p><code>mkdocs-print-site-plugin</code> will fix internal links when combining all the pages into one. Try navigating to other site pages using these internal links:</p> <ul> <li>Home</li> <li>Options</li> <li>Contributing</li> </ul>"},{"location":"demo_content.html#links-to-other-sections","title":"Links to other sections","text":"<p>When combining all pages into one, <code>mkdocs-print-site-plugin</code> will also ensure anchor links keep working (also to anchor links on other pages). Try them out:</p> <ul> <li>Dummy section lower down this demo page</li> <li>The Manual Testing in the contributing guide</li> </ul>"},{"location":"demo_content.html#charts","title":"Charts","text":"<p>From the mkdocs-charts-plugin:</p> <p>{   \"description\": \"A simple bar chart with embedded data.\",   \"data\": {     \"values\": [       {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},       {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},       {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}     ]   },   \"mark\": {\"type\": \"bar\", \"tooltip\": true},   \"encoding\": {     \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},     \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}   } }</p>"},{"location":"demo_content.html#magic-links","title":"Magic links","text":"<p>Magic links and emails: turned to links as recognized</p> Output Code http://www.google.com <code>http://www.google.com</code> johndoe@gmail.com <code>johndoe@gmail.com</code> www.google.com <code>www.google.com</code>"},{"location":"demo_content.html#markdown-extensions","title":"Markdown extensions","text":"<p>MkDocs has support for many markdown extensions (see mkdocs-material reference). Below is a quick showcase so you can see how they print.</p> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.</p> Note <p>This is a collapsible block, that is collapsed by default.</p> <p>Example of a button</p> <p>Primary button</p> <p>With icon </p> <pre><code>import tensorflow as tf\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p> <p>Ctrl+Alt+Del</p> C <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> C++ <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <p>Another tabbed content</p> Unordered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> Ordered list <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> <p>Embedding content:</p> <p>Example</p> Unordered List <p>Example:</p> <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <p>Result:</p> <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> Ordered List <p>Example:</p> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre> <p>Result:</p> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <p>Footnotes in a text: Lorem ipsum<sup>1</sup> dolor sit amet, consectetur adipiscing elit.<sup>2</sup></p> <ul> <li> \u2013 <code>.icons/material/account-circle.svg</code></li> <li>:fontawesome-regular-laugh-wink: \u2013 <code>.icons/fontawesome/regular/laugh-wink.svg</code></li> <li>:octicons-octoface-16: \u2013 <code>.icons/octicons/octoface-16.svg</code></li> <li> \u2013 Medium</li> <li> \u2013 Twitter</li> <li> \u2013 Facebook</li> </ul> <p> </p>"},{"location":"demo_content.html#images","title":"Images","text":"<p><code>mkdocs-print-site-plugin</code> supports enumerating figure captions (which can be added easily using the img2fig plugin):</p> Image caption Another image caption <p></p> <p></p> <p></p> <p></p>"},{"location":"demo_content.html#lists","title":"Lists","text":"<ol> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis   sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis   nulla. Vivamus a pharetra leo.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet   quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a   ultricies libero efficitur sed.</p> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet   rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> </ol> </li> </ol> <code>Lorem ipsum dolor sit amet</code> Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the  singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such  that \\(f(a)=f(b)\\)00.</p>"},{"location":"demo_content.html#dummy-section","title":"Dummy section","text":"<p>This section has an incoming anchor link, at the top of this page</p>"},{"location":"demo_content.html#some-lorem-ipsum","title":"Some lorem ipsum","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eget mi lacinia arcu ultrices rutrum eget a lacus. Etiam erat mi, sodales at nisl vel, bibendum tempor nunc. Cras in ultrices augue. Cras aliquam in mauris et semper. In hac habitasse platea dictumst. Proin dignissim scelerisque risus, consectetur ornare justo ultrices eu. Quisque tempus, elit eu ullamcorper interdum, metus augue pulvinar lectus, nec dictum mi dolor non turpis. Sed condimentum vulputate pretium.</p> <p>Nulla at nisl tortor. Praesent vitae turpis sit amet sem condimentum fermentum eget nec dolor. Maecenas et imperdiet ante, at ultrices orci. Nunc ornare sodales enim. Sed tempor vitae mi et faucibus. Nunc aliquam est sit amet mauris tempus varius. Aenean blandit vel nibh nec sagittis. Sed vehicula nunc a nunc vehicula viverra. Proin risus justo, ullamcorper ac sem a, vulputate ornare justo. Sed facilisis pharetra elit, vitae dignissim nibh iaculis eu. Suspendisse potenti. Curabitur quis arcu ac est faucibus suscipit vel non lacus.</p> <p>Ut tincidunt sapien sed sem auctor, et pellentesque erat tristique. Nunc porttitor lacus diam, eu malesuada nibh venenatis in. Donec sit amet enim eget enim facilisis placerat nec eget tortor. Etiam imperdiet, felis ac posuere dignissim, nulla sapien auctor mauris, ac aliquam orci leo nec dui. Donec efficitur turpis quis enim efficitur, eu ornare nisi consectetur. Sed ac arcu at orci pretium lobortis luctus non augue. Duis posuere purus at semper fringilla. Pellentesque facilisis libero vestibulum elit varius iaculis. Donec dapibus pretium scelerisque.</p> <p>Suspendisse non orci vitae lorem placerat pretium vitae a ex. Nunc facilisis aliquam risus in vehicula. Fusce sodales bibendum lectus id ultricies. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. In cursus blandit quam ac bibendum. Interdum et malesuada fames ac ante ipsum primis in faucibus. Ut commodo tellus vel interdum vulputate. Nulla in turpis tellus. Mauris at semper ex. Nulla varius leo eu libero placerat, quis euismod orci euismod. Phasellus pulvinar ut sapien nec elementum. Maecenas vel mi eros. Interdum et malesuada fames ac ante ipsum primis in faucibus. Phasellus volutpat massa vel purus interdum imperdiet. Curabitur congue turpis eget faucibus varius. Aenean eleifend placerat lorem vel vestibulum.</p> <p>Nullam in posuere urna. Sed cursus est porta maximus dignissim. Etiam id ante libero. Curabitur ac rhoncus turpis. Cras eu ipsum lacus. Aliquam ac rutrum elit. Donec pharetra in arcu feugiat interdum. Nam sed libero semper, sollicitudin urna vel, tincidunt nulla. Curabitur dapibus massa lectus, vulputate fermentum est finibus et. Ut efficitur velit nec justo varius tempor. Nullam aliquet commodo enim eget lobortis. Nullam sit amet nunc viverra, iaculis sem non, scelerisque mauris. Vivamus eu finibus lacus, dignissim luctus elit.</p> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.\u00a0\u21a9</p> </li> </ol>"},{"location":"options.html","title":"Options","text":"<p>You can customize <code>mkdocs-print-site-plugin</code> in your <code>mkdocs.yml</code> with the following settings:</p> <pre><code>plugins:\n  - print-site:\n      add_to_navigation: false\n      print_page_title: 'Print Site'\n      print_page_basename: 'print_page'\n      add_print_site_banner: false\n      # Table of contents\n      add_table_of_contents: true\n      toc_title: 'Table of Contents'\n      toc_depth: 6\n      # Content-related\n      add_full_urls: false\n      enumerate_headings: true\n      enumerate_figures: true\n      add_cover_page: true\n      cover_page_template: \"\"\n      path_to_pdf: \"\"\n      include_css: true\n      enabled: true\n      exclude:\n</code></pre> <code>add_to_navigation</code> Default is <code>false</code>. Adds a link 'Print Site' to your site navigation. You can also set to <code>false</code> and explicitly include the link in your navigation (<code>/print_page</code> or <code>/print_page.html</code>). <code>print_page_title</code> Default is <code>'Print Site'</code>. When <code>add_to_navigation</code> is set to <code>true</code> this setting controls the name of the print page in the navigation of the site. This setting is ignored when <code>add_to_navigation</code> is set to <code>false</code>. <code>print_page_basename</code> Default is <code>'print_page'</code>. Can be used to cutomized the path to the print page in the URL. <code>add_table_of_contents</code> Default is <code>true</code>. Adds a table of contents section at the beginning of the print page (in print version, the HTML version has a different sidebar ToC). <code>toc_title</code> Default is <code>'Table of Contents'</code>. When <code>add_table_of_contents</code> is set to <code>true</code> this setting controls the name of the table of contents of the print version of the print page. This setting is ignored when <code>add_table_of_contents</code> is set to <code>false</code>. <code>toc_depth</code> Default is <code>3</code>. When <code>add_table_of_contents</code> is set to <code>true</code> this setting controls the depth of the table of contents in the print version of the print page. This setting is ignored when <code>add_table_of_contents</code> is set to <code>false</code>. <code>add_full_urls</code> <p>Default is <code>false</code>. When printing a page, you cannot see the target of a link. This option adds the target url in parenthesis behind a link.</p> <p>For example \"google.com\" will be replaced by \"google.com (https://www.google.com)\"</p> <code>enumerate_headings</code> <p>Default <code>true</code>. This will add numbering (enumeration) to all headings and sections, as well as the table of contents. Note this will only enumerate the print site page; if you want to enumerate the entire site, you can use mkdocs-enumerate-headings-plugin.</p> <p>Example \"1.2 A chapter subsection\".</p> <code>enumerate_headings_depth</code> Default <code>6</code>. If <code>enumerate_headings</code>, the depth until which headings and sections are enumerated. <code>enumerate_figures</code> Default <code>true</code>. This will add numbering to all figure captions (for example \"Figure 1: \"). Works especially well with mkdocs-img2fig-plugin. <code>add_cover_page</code> Default <code>false</code>. When enabled, a cover page is added to the print page, displaying the <code>site_title</code> and other information from the <code>mkdocs.yml</code> file. See also Customizing the cover page <code>cover_page_template</code> Default <code>\"\"</code>. The path to a custom cover page template to use. See Customizing the Cover Page for more info. <code>add_print_site_banner</code> Default <code>false</code>. When enabled, a banner is added to the top of the HTML print page, explaining to users the current page contains all site pages. See Customizing the print site banner for more info. <code>print_site_banner_template</code> Default <code>\"\"</code>. The path to a custom print site banner template to use. See Customizing the print site banner for more info. <code>path_to_pdf</code> Default is empty. Option to make it easier to add a link to the PDF version of the site on each page. See Adding a PDF button for more info. <code>include_css</code> Default is <code>true</code>. When disabled the print-site stylesheets are not included. This makes it easy to overwrite the CSS with your own stylesheets, using the extra_css option in your <code>mkdocs.yml</code> file. <code>enabled</code> <p>Default is <code>true</code>. Enables you to deactivate this plugin. A possible use case is local development where you might want faster build times. It's recommended to use this option with an environment variable together with a default fallback (introduced in <code>mkdocs</code> v1.2.1, see docs). Example:</p> <pre><code># mkdocs.yml\nplugins:\n    - print-site:\n        enabled: !ENV [ENABLED_PRINT_SITE, True]\n</code></pre> <p>Which enables you do disable the plugin locally using:</p> <pre><code>export ENABLED_PRINT_SITE=false\nmkdocs serve\n</code></pre> <code>exclude</code> Default is empty. Allows to specify a list of page source paths that should not be included in the print page. Supports glob-like syntax such as <code>folder/</code> or <code>folder/*</code>. See Do Not Print for more info on excluding pages."},{"location":"how-to/banner.html","title":"Customize the print site banner","text":"<p>When a user visits the print page, it might not be immediately obvious how to use it. You can set the <code>add_print_site_banner</code> option to <code>true</code> to add a banner to the top of the HTML print page that will be hidden when printing.</p> <p>You might want to customize this banner, for example by translating it to your language. You can do that by specifying the path to a custom banner template in the <code>mkdocs.yml</code> file. This file should be a standard jinja2 template where you can combine HTML and jinja2 variables. The information specified in <code>mkdocs.yml</code> will already by available as jinja2 variables (see mkdocs project information).</p> <p>Example:</p> mkdocs.yml <pre><code>plugins:\n    - print-site:\n        add_print_site_banner: true\n        print_site_banner_template: \"docs/assets/templates/custom_banner.tpl\"\n</code></pre> docs/assets/templates/custom_banner.tpl <pre><code>&lt;p&gt;\n    &lt;em&gt;This box will disappear when printing&lt;/em&gt;\n    &lt;span style=\"float: right\"&gt;&lt;a href=\"https://timvink.github.io/mkdocs-print-site-plugin/\"&gt;mkdocs-print-site-plugin&lt;/a&gt;&lt;/span&gt;\n&lt;/p&gt;\n&lt;p&gt;This page has combined all site pages into one. You can export to PDF using &lt;b&gt;File &gt; Print &gt; Save as PDF&lt;/b&gt;.&lt;/p&gt;\n&lt;p&gt;See also [export to PDF](https://timvink.github.io/mkdocs-print-site-plugin/how-to/export-PDF.html) and [export to standalone HTML](https://timvink.github.io/mkdocs-print-site-plugin/how-to/export-HTML.html).&lt;/p&gt;\n</code></pre> <p>As an example, have a look at the default print_site_banner.tpl.</p>"},{"location":"how-to/banner.html#adding-configurable-content","title":"Adding configurable content","text":"<p>You might want to add some content to your print banner that's not yet specified in your <code>mkdocs.yml</code> file. Of course you could just hard-code it in your custom template file, but you could also make use of MkDocs's extra context feature, allowing you to use custom variables from your config file with <code>{{ config.extra.&lt;your variable&gt; }}</code>.</p> <p>Example:</p> mkdocs.yml <pre><code>plugins:\n    - print-site:\n        add_print_site_banner: true\n        print_site_banner_template: \"docs/assets/templates/custom_banner.tpl\"\n\nextra:\n    banner_message: \"Save this page using File &gt; Print &gt; Save as PDF\"\n</code></pre> docs/assets/templates/custom_banner.tpl <pre><code>&lt;p&gt;\n    &lt;em&gt;This box will disappear when printing&lt;/em&gt;\n    &lt;span style=\"float: right\"&gt;&lt;a href=\"https://timvink.github.io/mkdocs-print-site-plugin/\"&gt;mkdocs-print-site-plugin&lt;/a&gt;&lt;/span&gt;\n&lt;/p&gt;\n&lt;p&gt;{{ config.extra.banner_message }}&lt;/p&gt;\n</code></pre>"},{"location":"how-to/cover_page.html","title":"Customize the cover page","text":"<p>By default the <code>add_cover_page</code> option is set to <code>true</code>, which will add a cover page to the print page. You might want to customize it more to your liking.</p> <p>You can do that by specifying the path to a custom cover page template in the <code>mkdocs.yml</code> file. This file should be a standard jinja2 template where you can combine HTML and jinja2 variables. The information specified in <code>mkdocs.yml</code> will already by available as jinja2 variables (see mkdocs project information).</p> <p>Example:</p> mkdocs.yml <pre><code>plugins:\n    - print-site:\n        add_cover_page: true\n        cover_page_template: \"docs/assets/templates/custom_cover_page.tpl\"\n</code></pre> docs/assets/templates/custom_cover_page.tpl <pre><code>{% if config.site_name %}\n    &lt;h1&gt;{{ config.site_name }}&lt;/h1&gt;\n{% endif %}\n&lt;h2&gt;This is my custom print cover page&lt;/h2&gt;\n</code></pre> <p>To get you started have a look at the default cover_page.tpl.</p>"},{"location":"how-to/cover_page.html#adding-images","title":"Adding images","text":"<p>When adding images to your custom cover page template, make sure to define the image source as the hosted image path. The url for the image stored in <code>docs/assets/img/example.png</code> would be <code>/assets/img/example.png</code>.</p> <p>Example:</p> docs/assets/templates/custom_cover_page.tpl <pre><code>{% if config.site_name %}\n    &lt;h1&gt;{{ config.site_name }}&lt;/h1&gt;\n{% endif %}\n&lt;img src=\"/assets/img/example.png\" /&gt;\n</code></pre> <p>For a full working example have a look at this custom cover page with an image.</p>"},{"location":"how-to/cover_page.html#adding-configurable-content","title":"Adding configurable content","text":"<p>You might want to add some content to your cover page that's not yet specified in your <code>mkdocs.yml</code> file. Of course you could just hard-code it in your custom template file, but you could also make use of MkDocs's extra context feature, allowing you to use custom variables from your config file with <code>{{ config.extra.&lt;your variable&gt; }}</code>.</p> <p>Example:</p> mkdocs.yml <pre><code>plugins:\n    - print-site:\n        add_cover_page: true\n        cover_page_template: \"docs/assets/templates/custom_cover_page.tpl\"\n\nextra:\n    abstract: This is a report about a topic\n</code></pre> docs/assets/templates/custom_cover_page.tpl <pre><code>{% if config.site_name %}\n    &lt;h1&gt;{{ config.site_name }}&lt;/h1&gt;\n{% endif %}\n&lt;p&gt;{{ config.extra.abstract }}&lt;/p&gt;\n</code></pre>"},{"location":"how-to/cover_page.html#change-the-styling","title":"Change the styling","text":"<p>You'll likely also want to change the styling of the cover page to your liking. You can add your own CSS file using the extra_css option from MkDocs. <code>mkdocs-print-site-plugin</code> wraps the cover page in a <code>&lt;section id=\"print-site-cover-page\"&gt;</code>. You should use this in your CSS to ensure not affecting other pages.</p> <p>Example:</p> mkdocs.yml <pre><code>plugins:\n    - print-site:\n        add_cover_page: true\n\nextra_css:\n    - docs/assets/css/my_cover_page.css\n</code></pre> docs/assets/css/my_cover_page.css <pre><code>#print-site-cover-page h1 {\n    color: blue;\n}\n</code></pre>"},{"location":"how-to/do_not_print.html","title":"Exclude content from print","text":"<p>You might want to exclude certain parts of you website from the print site page. This can be useful when you don't want to include certain page, large images, tables, certain admonitions or appendixes to your site exports.</p>"},{"location":"how-to/do_not_print.html#ignoring-elements-in-a-page","title":"Ignoring elements in a page","text":"<p><code>mkdocs-print-site-plugin</code> offers the CSS class <code>.print-site-plugin-ignore</code>, that will ignore certain elements.</p> <p>The Attribute Lists extension, which is part of the standard Markdown library, allows to add HTML attributes and CSS classes to Markdown elements, and needs to be enabled in your <code>mkdocs.yml</code>.</p> <p>To apply the <code>.print-site-plugin-ignore</code> class to an element you can use <code>{: .print-site-plugin-ignore }</code> on many different markdown elements, as explained in the attr_list docs. <code>attr_list</code> does not support all markdown elements (see limitations), but remember Markdown is a subset of HTML and anything which cannot be expressed in Markdown can always be expressed with raw HTML directly.</p> <p>Example:</p> mkdocs.yml <pre><code>plugins:\n    - print-site\n\nmarkdown_extensions:\n    - attr_list\n</code></pre> docs/example.md <pre><code># Example page\n\nThis paragraph will not be part of the print site page.\n{: .print-site-plugin-ignore }\n\n![ignored image](some/path/image.png){: .print-site-plugin-ignore }\n\nYou can also use HTML to hide things from printing:\n&lt;span class=\"print-site-plugin-ignore\"&gt;hello&lt;/span&gt;\n</code></pre> <p>As another example, this paragraph will not be printed. Go have a look at the print site page and you'll find it missing.</p>"},{"location":"how-to/do_not_print.html#ignoring-admonitions","title":"Ignoring admonitions","text":"<p>Adding a class to admonitions is not supported by <code>attr_list</code>. You can use the <code>.print-site-plugin-ignore</code> class directly on admonitions however.</p> <p>Example:</p> <pre><code>!!! info print-site-plugin-ignore\n\n    As an example, this admonition will not be printed. Go have a look at the [print site page](/print_page.html) and you'll find it missing.\n</code></pre> <p>Which renders as:</p> <p>Info</p> <p>As an example, this admonition will not be printed. Go have a look at the print site page and you'll find it missing.</p>"},{"location":"how-to/do_not_print.html#ignoring-an-entire-page","title":"Ignoring an entire page","text":"<p>In the plugin configuration in <code>mkdocs.yml</code> you can specify a list of page source paths (one per line) that should not be included in the print page (excluded from processing by this plugin). This can be useful for example to exlude large appendixes that you only want to display on the web version. The source path of a page is relative to your <code>docs/</code> folder. You can also use globs instead of full source paths. To exclude <code>docs/subfolder/page.md</code> specify in your <code>mkdocs.yml</code> a line under <code>exclude</code>: with <code>- subfolder/page.md</code>. </p> <p>Example:</p> <pre><code># mkdocs.yml\nplugins:\n  - print-site:\n      exclude:\n        - index.md\n        - subfolder/page.md\n        - another_page.md\n        - folder/*\n</code></pre>"},{"location":"how-to/export-HTML.html","title":"Export to HTML","text":"<p>After enabling the <code>print-site</code> plugin in your <code>mkdocs.yml</code>, you will have your entire site combined into a single page. </p> <p>That allows you to create a standalone HTML page: a single self-contained file that has all images, styling and scripts embedded. This means you could send a site as an email attachment, a use case common within companies where deploying static sites might be more involved. This works because all the resources the page uses, such images, stylesheets (CSS) and interactive elements (javascript) are embedded into in a single HTML file using data URLs.</p> <p>You can create a .html file export using your internet browser (f.e. save as &gt; webpage, single page). You can also do this programmatically, for example using the htmlark python package:</p> <pre><code>pip install htmlark[http,parsers]\n</code></pre> <p>To create the export:</p> <pre><code>mkdocs build\ncd site/\n\n# when mkdocs.yml has use_directory_urls: true (the default)\nhtmlark print_page/index.html -o standalone.html\n\n# when mkdocs.yml has use_directory_urls: false\nhtmlark print_page.html -o standalone.html\n</code></pre>"},{"location":"how-to/export-PDF.html","title":"Export to PDF","text":"<p>After enabling the <code>print-site</code> plugin in your <code>mkdocs.yml</code>, exporting to PDF is as simple as browsing to <code>/print_page</code> or <code>/print_page.html</code> (url depends on your mkdocs setting <code>use_directory_urls</code>). From your browser you can use File &gt; Print &gt; Save as PDF.</p> <p>If you want to automatically create PDFs of your mkdocs website, you can automate the process using a headless chrome plugin.</p> <p>If you need more control over the PDF layout, I recommend the mkdocs-with-pdf plugin.</p> Avoid creating PDFs with Firefox <p>Firefox has some issues with print margins cutting of content, and anchors links not working properly. For more details see mkdocs-print-site-plugin#56</p>"},{"location":"how-to/export-PDF.html#automated-export-using-nodejs-and-chrome","title":"Automated export using nodejs and chrome","text":"<p>We can use nodejs together with the puppeteer headless chrome node.js package:</p> <ul> <li>Install nodejs </li> <li>Download puppeteer in the root of your project using the node package manager: <code>npm i --save puppeteer</code></li> <li>Save the script <code>export_to_pdf.js</code> (see below) in the root of your project</li> <li>Start a webserver with your site (<code>mkdocs serve</code>)</li> <li>In a separate terminal window, you can now run the PDF export with <code>url</code> (to your print page), <code>pdfPath</code> (name of output file) and <code>title</code> arguments:</li> </ul> <pre><code>node export_to_pdf.js http://localhost:8000/print_page.html out.pdf 'title'\n</code></pre> export_to_pdf.js <pre><code>// Credits for script: https://github.com/majkinetor/mm-docs-template/blob/master/source/pdf/print.js\n// Requires: npm i --save puppeteer\n\nconst puppeteer = require('puppeteer');\nvar args = process.argv.slice(2);\nvar url = args[0];\nvar pdfPath = args[1];\nvar title = args[2];\n\nconsole.log('Saving', url, 'to', pdfPath);\n\n// date \u2013  formatted print date\n// title \u2013 document title\n// url  \u2013 document location\n// pageNumber \u2013 current page number\n// totalPages \u2013 total pages in the document\nheaderHtml = `\n&lt;div style=\"font-size: 10px; padding-right: 1em; text-align: right; width: 100%;\"&gt;\n    &lt;span&gt;${title}&lt;/span&gt;  &lt;span class=\"pageNumber\"&gt;&lt;/span&gt; / &lt;span class=\"totalPages\"&gt;&lt;/span&gt;\n&lt;/div&gt;`;\n\nfooterHtml = ` `;\n\n\n(async() =&gt; {\n    const browser = await puppeteer.launch({\n        headless: true,\n        executablePath: process.env.CHROME_BIN || null,\n        args: ['--no-sandbox', '--headless', '--disable-gpu', '--disable-dev-shm-usage']\n    });\n\n    const page = await browser.newPage();\n    await page.goto(url, { waitUntil: 'networkidle2' });\n    await page.pdf({\n        path: pdfPath, // path to save pdf file\n        format: 'A4', // page format\n        displayHeaderFooter: true, // display header and footer (in this example, required!)\n        printBackground: true, // print background\n        landscape: false, // use horizontal page layout\n        headerTemplate: headerHtml, // indicate html template for header\n        footerTemplate: footerHtml,\n        scale: 1, //Scale amount must be between 0.1 and 2\n        margin: { // increase margins (in this example, required!)\n            top: 80,\n            bottom: 80,\n            left: 30,\n            right: 30\n        }\n    });\n\n    await browser.close();\n})();\n</code></pre>"},{"location":"how-to/pdf_button.html","title":"Adding a PDF button","text":"<p>Having users create a PDF of your website requires them to navigate to the print page and File &gt; Print &gt; Save as PDF (see export to PDF). You can make downloading a PDF version of your website even easier for your users by including a 'PDF' button on every page (like the one in the right corner of this page \ud83d\udc46).</p> <p>MkDocs supports theme extension, an easy way to override parts of a theme. That will allow you to add a button to the top of every page.</p> <p>This plugin adds to the context a <code>page.url_to_print_page</code> which contains the relative link from a page to the print page. You can use <code>page.url_to_print_page</code> when customizing a theme:</p> <p>Exporting to PDF is a separate step</p> <p>While it might be easier for your users, using this option means you need to re-create the PDF everytime you make a change to your website. See how to export to PDF.</p> <p>If you use this option and you are using version control like git, you might want to also gitignore the PDF file.</p>"},{"location":"how-to/pdf_button.html#adding-a-pdf-button-to-mkdocs-material-theme","title":"Adding a PDF button to mkdocs-material theme","text":"<p>In the mkdocs-material theme you can create an override for <code>main.html</code> (see customization).</p> <p>Example:</p> mkdocs.yml <pre><code>theme:\nname: material\ncustom_dir: docs/overrides\n\nplugins:\n    - print-site:\n        path_to_pdf: \"assets/the_name_of_your_file.pdf\"\n</code></pre> docs/overrides/main.html <pre><code>{% extends \"base.html\" %}\n\n{% block content %}\n\n{% if page.url_to_pdf %}\n    &lt;a href=\"{{ page.url_to_pdf }}\" title=\"Site PDF\" class=\"md-content__button md-icon\"&gt;\n        {% include \".icons/material/file-pdf-box.svg\" %}\n    &lt;/a&gt;\n{% endif %}\n\n{{ super() }}\n{% endblock content %}\n</code></pre>"},{"location":"how-to/pdf_button.html#adding-a-print-button-to-mkdocs-theme","title":"Adding a print button to mkdocs theme","text":"<p>You can also customize the base mkdocs theme, by overriding <code>main.html</code>.</p> <p>Example:</p> mkdocs.yml <pre><code>theme:\n    name: mkdocs\n    custom_dir: docs/overrides\n\nplugins:\n    - print-site:\n        path_to_pdf: \"assets/the_name_of_your_file.pdf\"\n</code></pre> docs/overrides/main.html <pre><code>{% extends \"base.html\" %}\n\n{% block repo %}\n    {% if page.url_to_pdf %}\n        &lt;li class=\"nav-item\"&gt;\n            &lt;a href=\"{{ page.url_to_pdf }}\" title=\"Site PDF\" class=\"nav-link\"&gt;\n                &lt;i class=\"fas fa-file-pdf\"&gt;&lt;/i&gt; PDF\n            &lt;/a&gt;\n        &lt;/li&gt;\n    {% endif %}\n\n{{ super() }}\n{% endblock repo %}\n</code></pre>"},{"location":"how-to/print_button.html","title":"Adding a print button","text":"<p>You might want to customize your site to include a 'print' button on every page that will lead to the print page. See the example in the top right corner of this page \ud83d\udc46.</p> <p>MkDocs supports theme extension, an easy way to override parts of a theme. That will allow you to add a button to the top of every page.</p> <p>This plugin adds to the context a <code>page.url_to_print_page</code> which contains the relative link from a page to the print page. You can use <code>page.url_to_print_page</code> when customizing a theme:</p>"},{"location":"how-to/print_button.html#adding-a-print-button-to-mkdocs-material-theme","title":"Adding a print button to mkdocs-material theme","text":"<p>In the mkdocs-material theme you can create an override for <code>main.html</code> (see customization).</p> <p>Example:</p> mkdocs.yml <pre><code>theme:\nname: material\ncustom_dir: docs/overrides\n\nplugins:\n    - print-site\n</code></pre> docs/overrides/main.html <pre><code>{% extends \"base.html\" %}\n\n{% block content %}\n\n{% if page.url_to_print_page %}\n    &lt;a href=\"{{ page.url_to_print_page }}\" title=\"Print Site\" class=\"md-content__button md-icon\"&gt;\n        {% include \".icons/material/printer.svg\" %}\n    &lt;/a&gt;\n{% endif %}\n\n{{ super() }}\n{% endblock content %}\n</code></pre>"},{"location":"how-to/print_button.html#adding-a-print-button-to-mkdocs-theme","title":"Adding a print button to mkdocs theme","text":"<p>You can also customize the base mkdocs theme, by overriding <code>main.html</code>.</p> <p>Example:</p> mkdocs.yml <pre><code>theme:\n    name: mkdocs\n    custom_dir: docs/overrides\n\nplugins:\n    - print-site\n</code></pre> docs/overrides/main.html <pre><code>{% extends \"base.html\" %}\n\n{% block repo %}\n    {% if page.url_to_print_page %}\n        &lt;li class=\"nav-item\"&gt;\n            &lt;a href=\"{{ page.url_to_print_page }}\" title=\"Print Site\" class=\"nav-link\"&gt;\n                &lt;i class=\"fa fa-print\"&gt;&lt;/i&gt; Print\n            &lt;/a&gt;\n        &lt;/li&gt;\n    {% endif %}\n\n{{ super() }}\n{% endblock repo %}\n</code></pre>"}]}